Swift 3.0 最新消息，ABI(应用二进制接口) 无法实现稳定，这意味着旧版本的 Swift 二进制程序无法在 Swift 3.0 中运行。算是个小打击，不过不影响开发者对 Swift 的信心。 
[原创] Swift Evolution 系列开篇：简介 (@shanks)||http://swift.gg/2016/05/25/swift-evolution-2016-05-25/||翻译组的原创文章，每周一个主题，收录相关的经典问题和解决方法，推荐阅读。
[译] Swift 中的尾递归和蹦床 (@aaaron7)||http://swift.gg/2016/05/27/recursive-tail-calls-and-trampolines-in-swift/||Swift 中到底有没有“尾递归”？如何手动实现“尾递归”？今天这篇文章干货满满，有深度，不难读，强烈推荐。
[译] MVVM 不是那么好 (@zltunes)||http://swift.gg/2016/05/26/mvvm-is-not-very-good/||MVVM 很火，这次来听听不同的声音。
[译] Apple Watch 一年有感 (@saitjr)||http://swift.gg/2016/05/24/apple-watch-thoughts/||一个开发者的 Apple Watch 使用体验，翻译完之后，译者@saitjr 表示不想买了。
[译] [2016 版] 常见操作性能对比 (@Yake)||http://swift.gg/2016/05/25/friday-qa-2016-04-15-performance-comparisons-of-common-operations-2016-edition/||作者对 iOS 开发常用的操作进行了性能测试，从中可以得出许多有用的结论，写出更加高效的程序。
Pod 预编译，减少不必要的生命浪费 (@txx)||http://mp.weixin.qq.com/s?__biz=MzIwMTYzMzcwOQ==&mid=2650948341&idx=1&sn=bf12097fe33d3bb553fab040a394eab6&scene=23&srcid=0528wdyi1BgWl45FynE1M7ka#rd||Swift 编译速度经常被人诟病，项目大了之后经常要等好久，严重影响编程效率。在这篇文章中虾神介绍了一种解决方案：用 Pod 预编译来减少需要编译的文件，目前国内很多大型项目都采用了这种方法，可以参考。
URL Pattern Matching (@johnpatrickmorgan)||http://johnpatrickmorgan.github.io/2016/05/11/URLPatternMatching/||本周的英文文章，介绍了四种 URL 的匹配方法，可以对比学习一下，重在思想	。||
opensource
Track：线程安全缓存 (@maquannene)||https://github.com/maquannene/Track||使用 LRU 算法实现的线程安全缓存，支持硬盘缓存和内存缓存，并且不会死锁。
JLRoutes：iOS 和 OS X 路由库 (@Joel)||https://github.com/joeldev/JLRoutes||基于 block 的 URL 路由 API，专门用于处理复杂的应用 URL 路由，你再也不用手动解析字符串了。
Regex：Swift 正则库 (@crossroadlabs)||https://github.com/crossroadlabs/Regex||在基础的正则匹配上增加了很多功能，比如成组、使用自定义函数进行替换、分割字符串等等，看起来还是很强大的。||